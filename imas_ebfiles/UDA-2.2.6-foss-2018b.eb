easyblock = 'CMakeMake'

name = 'UDA'
version = '2.2.6'
local_pyver = '3.6.6'
local_javaver='13.0.1'

homepage = 'https://git.iter.org/projects/IMAS/repos/uda/browse'

description = """The UDA API provides plugin driven data abstraction.
The UDA can be either run as a client-server API, running as thin client
 with all functionality being handled on a remote server, or as fat-client 
 API where both the client access and plugin functionality is run on the
 local machine.
"""

toolchain = {'version': '2018b', 'name': 'foss'}
toolchainopts = {'pic': False}

sources = [{
    'filename': '%(namelower)s-%(version)s.tar.gz',
    'git_config': {
        'url': 'ssh://git@git.iter.org/imas',
        'repo_name': 'uda',
        'tag': '%(version)s',
    },
}]


# checksums = [('sha512', 'a5f043a8a64e0a4541b6d5d6f3c4065661170d74b652f306ab24206de0998e50f4a0a70e58e41f600a9a9bc103a965cc159bf869ffeb69de8af733d82f394156')]

builddependencies = [
    
    ('Java', local_javaver, '', True),
    ('Python', local_pyver),
    ('SWIG', '3.0.12', '-Python-'+local_pyver, toolchain),
    ('Boost', '1.68.0', '-Python-'+local_pyver, toolchain), 
    ('CMake', '3.12.1'),
    ('OpenSSL', '1.1.0h'),
    ('PostgreSQL', '10.3'),
    ('libxml2', '2.9.8'),
    ('libMemcached', '1.0.18'),
    ('bzip2', '1.0.6'),
    ('HDF5', '1.10.2'),
    ('netCDF', '4.6.1'),
    ('MDSplus', '7.84.8','-Java-'+local_javaver)
]

# imas_plugin: mdsplus error, redefine TRUE,FALSE in status.h, system defined TRUE in rpc/types.h
configopts = '-DGIT_VERSION=%(version)s -DTARGET_TYPE=OTHER -DBUILD_PLUGINS=hdf5  -DCMAKE_C_FLAGS=" -Wno-maybe-uninitialized" '
 

sanity_check_paths = {
    'files': ['lib/libuda_server.a',
              'lib/libuda_server.so',
              'lib/libuda_client.a',
              'lib/libuda_client.so',
              'lib/libfatuda_client.a',
              'lib/libfatuda_client.so'
              ],
    'dirs': ['include/uda/client',
             'include/uda/clientserver',
             'include/uda/plugins',
             'include/uda/server',
             'include/uda/structures',
             'lib/plugins',
             'lib/pkgconfig'],
}
modextravars = {
    'UDA_DIR': '%(installdir)s',
}

modextrapaths = {
    'PYTHONPATH': 'python'
}
moduleclass = 'data'

#pragma once
#include <mdsshr_messages.h>
#ifndef FALSE
#define FALSE 0
#endif
#ifndef TRUE
#define TRUE  1
#endif
#define B_TRUE  TRUE
#define B_FALSE FALSE
#define C_OK    0
#define C_ERROR -1
#define IS_OK(status)     ((status) & 1)
#define STATUS_OK         IS_OK(status)
#define IS_NOT_OK(status) (!IS_OK(status))
#define STATUS_NOT_OK     (!STATUS_OK)
#define INIT_STATUS_AS    int status =
#define INIT_STATUS       INIT_STATUS_AS MDSplusSUCCESS
#define INIT_STATUS_ERROR INIT_STATUS_AS MDSplusERROR
#define TO_CODE(status)   (status & (-8))
#define STATUS_TO_CODE    TO_CODE(status)
#define RETURN_IF_STATUS_NOT_OK  if STATUS_NOT_OK return status;
#define RETURN_IF_NOT_OK(CHECK)  do {status = CHECK; RETURN_IF_STATUS_NOT_OK;} while(0)