
## Site configuration Makefile for ITER Organization's HPC Cluster

# This file should be maintained by the administrator of the site.
# Users should modify Makefile.config for their personal overrides.

# Toggle what language interfaces are (not) built by default
# Use ?= notation to allow user override from command line.
IMAS_CPP = yes
FORTRAN = yes
GFORTRAN = yes # FORTRAN compiler
IFORT = yes # FORTRAN compiler
G95 = no # FORTRAN compiler
PGI = yes # FORTRAN compiler
JAVA = yes
MATLAB = no
PYTHON = yes
PYTHON2 = yes
PYTHON3 = yes

# Environment modules dependency requirements (runtime dependencies)
# Specify in order, alternating the <name to test> and the <name to load> of each module.
# <name to test> is used to test if the module is loaded already, and its corresponding
# <name to load> is the full name+version of the preferred module to load if test failed.
# This string is a {TCL list of words}.
# Include \n to have pretty linebreaks in the modulefile.
MODULEFILE_DEPENDENCIES={\n\
     gcc/7.2.0    compiler/gcc/7.2.0 \n\
     Java         Java/1.9 \n\
     Anaconda2    Anaconda2/2018.12\n\
     Anaconda3    Anaconda3/2018.12\n\
     blitz++      blitz++/1.0.1\n\
     intel 	  compiler/intel/2017\n\
     pgi          compiler/pgi/17.5\n\
     MDSplus      mdsplus/anaconda2\n\
}

# Test for this jar file in the CLASSPATH:
SAXONJARFILE= saxon9he.jar

# Test that these module names are loaded for UAL compilation (compile time):
UAL_MODULES = blitz++
# Additionally test for these module names in case of PGI=yes INTEL=yes,.. see below.
UAL_MODULES_G95 = 
UAL_MODULES_PGI = pgi
UAL_MODULES_INTEL = intel
UAL_MODULES_JAVA = Java
UAL_MODULES_PYTHON2 = Anaconda2
UAL_MODULES_PYTHON3 = Anaconda3

